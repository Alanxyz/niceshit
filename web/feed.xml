<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>NiceShit!</title>
<link>https://niceshit.ml/</link>
<description>Blog sobre ciencia, humanidades y tecnología.</description>
<item>
<title>Así funciona esta web</title>
<link>https://niceshit.tk/asi-funciona-esta-web.html</link>
<guid>https://niceshit.tk/asi-funciona-esta-web.html</guid>
<description><![CDATA[ <h1 id="así-funciona-esta-web">Así funciona esta web</h1>
<p><img src="attachments/pepe-hacker.webp" /></p>
<p>La funcionalidad de un blog no es mas que desplegar documentos de texto y distribuirlos mediante RSS o una subscripción por correo electrónico. Tareas simples que, por lo tanto, deberían realizarse de forma simple.</p>
<p>He visto muchas webs con menos necesidades usando tecnologías monstruosamente grandes innecesariamente. La mayoría de esas tecnologías son algo como <em>“Mírame. Soluciono este problema que no sabias que tenias y estas empresas me usan. Úsame en tu proyecto”</em>. Existen cosas útiles como <a href="https://reactjs.org/">React</a>, si tienes una plataforma compleja o esperas que se vuelva compleja. Cuando no es el caso, parece que hay quienes solo usan las cosas grandes para mostrarnos que saben usarlas.</p>
<h2 id="características-y-estructura">Características y estructura</h2>
<p>Las cosas que resumen las capacidades de esta web son:</p>
<ul>
<li>Generación de paginas estáticas</li>
<li>Solo HTML, CSS y JavaScript</li>
<li>Soporte para Markdown</li>
<li>Feed mediante RSS</li>
<li>Optimización de imágenes</li>
<li>Flexibilidad, minimalismo e independencia</li>
</ul>
<p>Para cumplir con esta lista solo recurrí a un script y una estructura de archivos coherente. Me tomo menos de una hora codificar la primer versión de esta web y no ha tenido cambios significativos desde entonces. Puedes encontrar el código actualizado <a href="https://github.com/AstralCam/niceshit">aquí</a>.</p>
<p>La estructura de directorios es la siguiente</p>
<pre><code>niceshit
├── Makefile
├── posts
├── templates
└── web
    ├── attachments
    ├── scripts
    └── styles</code></pre>
<p>En la carpeta <code>posts</code> se guardan <em>todas</em> las paginas de esta web escritas en formato Markdown. La idea de esto es poder usar cualquier editor sin preocuparme por la compatibilidad del formato. Las paginas se exportan a código HTML mediante <a href="https://pandoc.org/">Pandoc</a> usando alguna de las <a href="https://pandoc.org/MANUAL.html#templates">plantillas</a> que se encuentran en <code>templates</code>. Los archivos que puedan tener estos documentos se guardan en <code>attachments</code> y se optimizan para la web mediante <a href="https://developers.google.com/speed/webp/">img2webp</a>. Todo termina dentro de <code>web</code> listo para publicarse. Ademas, hay carpetas para colocar hojas de estilos y scripts para mejorar la apariencia e interactividad de la web.</p>
<h3 id="script-principal">Script principal</h3>
<p>El archivo <code>Makefile</code> es el corazón de la web. Es quien se encarga de automatizar las tareas mencionadas. Es un script del programa <a href="https://www.gnu.org/software/make/">Make</a> que se encarga de procesar los documentos y generar las paginas de la web a partir de ellos. Detecta cambios en los archivos fuente y genera las paginas faltantes evitando generar toda la web de nuevo, lo que lo hace muy practico.</p>
<details>
<p><summary>Ver archivo Makefile</summary></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ex">URL</span> ?= https://niceshit.tk/</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="ex">LANG</span> := es</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="ex">DESCRIPTION</span> := Un blog penoso, insignificante y para nada serio.</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="ex">MD_NOTES</span> := <span class="va">$(</span><span class="ex">shell</span> ls -b posts/*.md<span class="va">)</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="ex">HTML_NOTES</span> := <span class="va">$(</span><span class="ex">shell</span> ls -b posts/*.md <span class="kw">\</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>                            <span class="kw">|</span> <span class="fu">sed</span> -e <span class="st">&#39;s,posts/,web/,g&#39;</span> -e <span class="st">&#39;s/.md/.html/g&#39;</span><span class="va">)</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="ex">all</span>: <span class="va">$(</span><span class="ex">HTML_NOTES</span><span class="va">)</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a><span class="ex">web</span>/%.html: <span class="ex">posts/%.md</span> templates/post.html</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>    <span class="ex">@echo</span> procesando <span class="st">&quot;$&lt;&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>    <span class="ex">@pandoc</span> -s <span class="kw">\</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>        <span class="ex">--metadata</span> title=<span class="st">&quot;</span><span class="va">$$</span><span class="st">(grep &#39;^# &#39; $&lt; | sed &#39;s,# ,,&#39;)&quot;</span> <span class="kw">\</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>        <span class="ex">--metadata</span> lang=<span class="st">&quot;</span><span class="va">$(</span><span class="ex">LANG</span><span class="va">)</span><span class="st">&quot;</span> <span class="kw">\</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>        <span class="ex">--metadata</span> description-meta=<span class="st">&quot;</span><span class="va">$(</span><span class="ex">DESCRIPTION</span><span class="va">)</span><span class="st">&quot;</span> <span class="kw">\</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>        <span class="ex">--template</span> templates/post.html <span class="kw">\</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>        <span class="ex">--css</span> styles/main.css <span class="kw">\</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>        <span class="ex">--css</span> styles/ui.css <span class="kw">\</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a>        <span class="ex">--css</span> styles/theme.css <span class="kw">\</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a>        <span class="ex">--katex</span>=https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/ <span class="kw">\</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>        <span class="st">&quot;$&lt;&quot;</span> <span class="ex">-o</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a><span class="ex">feed</span>:</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a>    <span class="ex">@printf</span> <span class="st">&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;rss version=&quot;2.0&quot;&gt;\n&lt;channel&gt;\n&lt;title&gt;NiceShit!&lt;/title&gt;\n&lt;link&gt;https://niceshit.ml/&lt;/link&gt;\n&lt;description&gt;Blog sobre ciencia, humanidades y tecnología.&lt;/description&gt;\n&#39;</span> <span class="op">&gt;</span> web/feed.xml</span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true"></a>    <span class="ex">@for</span> i in <span class="va">$(</span><span class="ex">MD_NOTES</span><span class="va">)</span><span class="kw">;</span> <span class="kw">do</span> <span class="kw">\</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true"></a>        <span class="kw">if</span><span class="bu"> [</span> <span class="va">$$</span>i <span class="ot">!=</span> <span class="st">&#39;posts/index.md&#39;</span><span class="bu"> ]</span> <span class="kw">&amp;&amp;</span><span class="bu"> [</span> <span class="va">$$</span>i <span class="ot">!=</span> <span class="st">&#39;posts/donaciones.md&#39;</span><span class="bu"> ]</span> <span class="kw">&amp;&amp;</span><span class="bu"> [</span> <span class="va">$$</span>i <span class="ot">!=</span> <span class="st">&#39;posts/404.md&#39;</span><span class="bu"> ]</span>; <span class="kw">then</span> <span class="kw">\</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true"></a>        <span class="bu">printf</span> <span class="st">&#39;&lt;item&gt;\n&lt;title&gt;%s&lt;/title&gt;\n&lt;link&gt;%s&lt;/link&gt;\n&lt;guid&gt;%s&lt;/guid&gt;\n&lt;description&gt;&lt;![CDATA[ %s ]]&gt;&lt;/description&gt;\n&lt;/item&gt;\n&#39;</span> <span class="kw">\</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true"></a>        <span class="st">&quot;</span><span class="va">$$</span><span class="st">(grep &#39;^# &#39; </span><span class="va">$$</span><span class="st">i | sed -e &#39;s,# ,,g&#39;)&quot;</span> <span class="kw">\</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true"></a>        <span class="st">&quot;</span><span class="va">$$</span><span class="st">(echo &quot;</span><span class="va">$(</span><span class="ex">URL</span><span class="va">)$$</span><span class="ex">i</span><span class="st">&quot; | sed -e &#39;s,posts/,,g&#39; -e &#39;s,.md,.html,g&#39;)&quot;</span> <span class="kw">\</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true"></a>        <span class="st">&quot;</span><span class="va">$$</span><span class="st">(echo &quot;</span><span class="va">$(</span><span class="ex">URL</span><span class="va">)$$</span><span class="ex">i</span><span class="st">&quot; | sed -e &#39;s,posts/,,g&#39; -e &#39;s,.md,.html,g&#39;)&quot;</span> <span class="kw">\</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true"></a>        <span class="st">&quot;</span><span class="va">$$</span><span class="st">(pandoc </span><span class="va">$$</span><span class="st">i)&quot;</span> <span class="kw">\</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true"></a>        ; <span class="kw">fi</span> <span class="kw">\</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true"></a>        ;<span class="kw">done</span> <span class="op">&gt;&gt;</span> <span class="ex">web/feed.xml</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true"></a>    <span class="ex">@printf</span> <span class="st">&#39;&lt;/channel&gt;\n&lt;/rss&gt;&#39;</span> <span class="op">&gt;&gt;</span> web/feed.xml</span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true"></a></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true"></a><span class="ex">clear</span>:</span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true"></a>    <span class="ex">@rm</span> web/*.html</span></code></pre></div>
</details>
<p>Este Makefile permite manejar la web mediante comandos de consola. Estos son los disponibles.</p>
<ul>
<li><code>make</code>: Genera las paginas nuevas paginas en HTML, actualiza las que han sido editadas y procesa las imágenes que aun no se han optimizado.</li>
<li><code>make feed</code>: Crea el feed RSS de todas las paginas sobreescribiendo el actual si este existe.</li>
<li><code>make clean</code>: Elimina todos los archivos HTML contenidos en la capeta <code>web</code>.</li>
</ul>
<h2 id="conclusión">Conclusión</h2>
<p>Al final, todo esto es la manera en que he solucionado mi necesidad de un blog. Este pequeño sistema satisface mis necesidades y es suficiente para los pocos planes a futuro del blog. La intención principal es incentivar a crear webs propias sin acudir a software innecesario. Si alguien necesita algo que ya este hecho, recomiendo usar <a href="https://writefreely.org/">WriteFreely</a> o <a href="https://pedantic.software/git/blogit">Blogit</a> para usuarios que quieran algo mas mínimalista.</p> ]]></description>
</item>
<item>
<title>Consejos para tus dotfiles</title>
<link>https://niceshit.tk/consejos-para-tus-dotfiles.html</link>
<guid>https://niceshit.tk/consejos-para-tus-dotfiles.html</guid>
<description><![CDATA[ <h1 id="consejos-para-tus-dotfiles">Consejos para tus dotfiles</h1>
<p><img src="attachments/dotfiles.webp" /></p>
<p>Recientemente tuve la suficiente cantidad de tiempo para darle algo de mantenimiento a mi computadora personal. Entre las cosas que hice, una importante fue mi cambio de sistema operativo de <a href="https://www.debian.org/">Debian Linux</a> a <a href="https://www.devuan.org/">Devan Linux</a>. Para esta nueva instalación tuve que hacer respaldos de mis archivos y configuraciones.</p>
<p>Cambiar de sistema operativo típicamente seria una tarea muy molesta, llena de contratiempos, pero teniendo los desfiles bien controlados es realmente solo cuestión del tiempo que pedo durar la instalación. Paradójicamente, entre mas fácil para un usuario es hacer una reinstalación, menos frecuentemente suele necesitar hacer una. Esto ultimo, contrario a un usuario nuevo que tiene mucho por probar y poco tiempo para probar.</p>
<h2 id="respalda-tus-configuraciones">Respalda tus configuraciones</h2>
<p>Los <em>dotfiles</em> son para guardar. Nunca sabes cuando tendras que cambiar de PC o perderas la informacion de tu maquina actual. Cuado los guardes, haz respaldos. Puedes usar la nube de tu preferencia, meterlos en un disco duro de por allí, pero lo mas comun es meterlas en un repositorio de Git. Normalmente estos se suben a <a href="https://github.com/">Github</a> o <a href="https://gitlab.com/">Gitlab</a>.</p>
<h3 id="conserva-solo-lo-necesario">Conserva solo lo necesario</h3>
<p>No hay necesidad de incluir en tus <em>dotfiles</em> todas las configuraciones que tengas en tu sistema. Puede que sea insignificante y puedas vivir sin ella, o que sea tan trivial realizarla que no merezca mucho la pena guardar el archivo de configuración. Solo aumentara la dificultad de gestionar tus configuraciones. En cambio, solo guarda las configuraciones mas significativas para ti, como las del software que mas frecuentas cuando estas tras el teclado, o cosas que necesites por una razón de accesibilidad.</p>
<h3 id="comparte-tus-dotfiles">Comparte tus <em>dotfiles</em></h3>
<p>Cuando ya tienes tus <em>dotfiles</em> guardados, sin informacion sensible, sin archivos innutiies, no pierdes nada con compartirlos. Pueden ayudar a alguien mas. Con colocarlos en Github y ponerle la etiqueta <code>dotfiles</code> al repositorio, ya estan en un buen lugar accesible para los demás. Hay otras buenas webs dedicadas a compartir las configuraciones. Algunas de ellas son: <a href="https://reddit.com/r/unixporn">Unixporn</a> y <a href="http://dotshare.it/">Dotshare</a>.</p>
<p>Recuerda revisar las configuraciones de otros usuarios ocasionalmente. Pudes sacar inspiración e ideas para mejorar tus propios <em>dotfiles</em>. Solo no le dediques demasiado tiempo a esto. Puede ser hipnótico inspeccionar las configuraciones de otros usuarios, en especial si se dedican a algo similar a lo que te dedicas tú.</p>
<p>Puedes encontrar mis <em>dotfiles</em> por <a href="https://github.com/AstralCam/dotfiles">aquí</a>.</p>
<h3 id="cuando-algo-deja-de-ser-una-configuración">Cuando algo deja de ser una configuración</h3>
<p>Las configuraciones para algun programa a veces crecen demasiado. Tal vez comenzaste configurando un atajo de teclado para tu editor de código; después ese atajo se fue haciendo mas sofisticado; tal vez se convirtió en algo tan grande que es mejor separarlo de tus configuraciones personales y crear un plugin para el editor. Pudo haber sido inicialmente un script que creció tanto que perfectamente puede considerarse como un programa completo.</p>
<p>Si inconscientemente terminaste escribiendo software en tus configuraciones, separalo. Publicarlo en Github puede ser una gran idea. Le servirá a otros usuarios y probablemente recibas contribuciones al código que mejoren ese pequeño programa. Es menos probable que alguien contribuya si solo está dentro de tus <em>dotfiles</em>.</p>
<h2 id="manejar-los-dotfiles">Manejar los <em>dotfiles</em></h2>
<p>Ahora, gestionar las configuraciones puede ser aburrido y tedioso. Por suerte, existe la manera definitiva de hacerlo: usando stow.</p>
<h3 id="usa-stow">Usa stow</h3>
<p><a href="https://www.gnu.org/software/stow/">Stow</a> es una maravilla. La idea de stow es ahorrarnos el problema de tener que copiar nuestros archivos de configuración a sus ubicaciones correspondientes cada que las queremos usar, o también, copiar de vuelta los archivos al repositorio luego de hacer una modificación. Con stow, tenemos un unico lugar donde van todas las configuraciones, luego con se enlazan usando links entre archivos para ponerlos en su localización.</p>
<p>Al usar stow necesitamos de una carpeta que este dentro de <code>$HOME</code> que contenga los <em>dotfiles</em>. Esta carpeta debe estar organizada de esta forma: carpetas con nombres de los programas que dentro contienen todo lo necesario para configurarse como si fuesen otro directorio HOME. Por ejemplo:</p>
<pre class="text"><code>~/.dotfiles/
├── bash
│   └── .bashrc
├── scripts
│   └── .local
│       └── bin
│           ├── sync
│           └── colortest
├── urxvt
│   └── .Xresources
├── vim
│   └── .vimrc
└── zathura
    └── .config
        └── zathura
            └── zathurarc</code></pre>
<p>Para instalar nuestras configuraciones hacemos, por ejemplo, <code>stow vim</code> para instalar solo los archivos de configuracion de Vim, <code>stow urxvt bash</code> para los de Bash y Urxvt, y <code>stow *</code> para instalar todos los archivos de todos los programas.</p>
<p>Una vez instalados tendremos que si editamos <code>~/.vimrc</code> en realidad estaremos editando <code>~/.dotfiles/vim/.vimrc</code>, por lo que los cambios se harán en el repositorio y Git los rastreara. Por el lado contrario, si hacemos <code>git pull</code> en el repositorio, este se actualizara y con él lo harán los archivos pues están enlazados.</p>
<p>Stow, ademas de solucionar el ubicar los archivos de configuracion, tambien nos propone una estructura de directorios funcional para almacenarlos.</p>
<h3 id="usa-los-.gitignore">Usa los .gitignore</h3>
<p>Hay archivos que no queremos que Git agregue al repositorio. Usando un archivo .gitignore podemos hacer que sean ignorados. Por ejemplo, si usamos un el lector de RSS Newsboat, definitivamente no queremos que se guarde el cache, el hisotorial, ni nuestras URLs privadas de las webs que seguimos. Lamentablemente, Newsboat coloca estos archivos en la misma carpeta que donde va la configuración. Basta con agregar un archvio llamado <code>.gitignore</code> que contenga el siguiente texto.</p>
<pre class="text"><code>cache.db
cache.db.lock
history.cmdline
history.search
urls</code></pre>
<p>Las expresiones pueden ser mas complejas (podriamos indicar que se ignoren todos los archivos PDF, por poner un ejemplo), pero creo que quedan claras las ventajas de usar los .gitignore en nuestros <em>dotfiles</em>.</p>
<p>Existen archivos equivalentes en otros sistemas de respaldo como Syncthing. Si no usa Git, investigue como se hace en su programa elegido.</p>
<h2 id="configuración-mínima-y-configuración-total">Configuración mínima y configuración total</h2>
<p>Esto es importante.</p>
<p>La vida te da dos caminos a elegir al cultivar tus <em>dotfiles</em>. Puedes ser alguien que configura todo en absoluto, que no se deja pasar ningún detalle con tal de mejorar su configuración, que no se guarda ninguna incomodidad; o puedes ser un usuario que hace configuraciones minimalistas con solo lo que necesita, pensando en no hacer cosas extrañas ni gastar mucho tiempo en ello por mas que otros lo vean como una inversión.</p>
<p>Personalmente, prefiero por mucho ser un usuario de configuraciones predeterminadas.</p>
<p><img src="attachments/default-user.webp" /></p>
<h2 id="diseño-y-buen-gusto">Diseño y buen gusto</h2>
<p>Hacer <em>dotfiles</em> solo por hacerlos, ocasiona que sean bastante feos. Hay un par de trucos que terminara descubriendo si sigue haciendo <em>dotfiles</em>.</p>
<h3 id="mantén-la-estética-consistente">Mantén la estética consistente</h3>
<p>Si usas un esquema de color tu editor de código, definitivamente querrás tenerlo también en tu terminal, o por lo menos algo que combine. Puedes extender esta idea personalizando los temas usando los mismos tonos de color y la misma fuente tipográfica en todos los programas. El fondo de pantalla también debe combinar o sentirás una gran incomodidad al mirarlo.</p>
<p>Hay esquemas de color que son famosos por ser excelentes en estética y funcionalidad. Si no tienes tiempo para diseñar el tuyo, usa alguno de esos esquemas famosos como <a href="https://www.nordtheme.com/">Nord</a> y <a href="https://github.com/morhetz/gruvbox">Gruvbox</a>.</p>
<figure>
<img src="attachments/gruvbox.webp" alt="" /><figcaption>Un buen rice 🍙 con Gruvbox</figcaption>
</figure>
<p>Hay esquemas de color que se ven genial, pero a la hora de usarlos aparecen terribles problemas: cansan la vista, dificultan la lectura, cuesta encontrar elementos en la pantalla, entre otras cosas. Esto sencillamente no es funcional, y hay que cambiarlos de inmediato.</p>
<h3 id="el-fondo-de-pantalla-no-debe-ser-lo-mas-importante">El fondo de pantalla no debe ser lo mas importante</h3>
<p>Hay quienes remueven todos los elementos gráficos y simplemente colocan un fondo de pantalla llamativo. Simplemente hacerlo apesta.</p>
<h3 id="deja-los-temas-oscuros">Deja los temas oscuros</h3>
<p>Los temas oscuros (en verdad muy oscuros) son lo mas llamativo al inicio. Se tiene la idea de que solo se puede escoger entre un tema claro con un hiriente blanco intenso y uno oscuro que es mejor para la vista y mas elegante. Casi siempre se olvidan de los colores pasteles que están en un punto medio. Con un esquema de colores pasteles suaves definitivamente no obtendrá una apariencia agresiva como la que sí tendría con algo oscuro con colores contrastantes, pero obtendrá el resto de ventajas y sera incluso mejor para los ojos.</p>
<p>Las preferencias personales dan la ultima palabra. Solamente considere otros niveles de contraste antes de elegir.</p>
<h2 id="cuando-configurar-no-es-suficiente">Cuando configurar no es suficiente</h2>
<h3 id="escribe-scripts">Escribe scripts</h3>
<p>Escribir scripts realmente hace la diferencia. Hacerlo implica ser un usuario que de verdad aprovecha una PC. Puede ser para cualquier cosa: tomar una captura de pantalla, sincronizar tus documentos, enviar una notificación cada 30 minutos para recordarte estirar las piernas, cambiar al tema oscuro después de las 8:00 pm, listar los documentos, eliminar archivos temporales…</p>
<p>Recomiendo altamente hacerlos en POSIX Shell Scripting, pero cualquier lenguaje de scripting funcionara bien.</p>
<h3 id="haz-un-fork">Haz un <em>fork</em></h3>
<p>No siempre es posible realizar la configuración que tanto deseamos. Hacer un <em>fork</em> al programa para aplicarle nuestras modificaciones deseadas es la opción que aparece. Hacer un <em>fork</em> puede ser tedioso, mantenerlo, aun mas. Se tiene que evaluar muy bien si valdrá la pena hacerlo, pero muchas veces no queda otra opción.</p>
<p>Si la modificación que quieres hacer es una genialidad, haz un <em>pull request</em>. Si el proyecto ya no esta mantenido, no lo dudes, crea el <em>fork</em>, no te perderás de nada, esa cosa ya se está empolvando.</p>
<h3 id="crea-tus-propios-programas">Crea tus propios programas</h3>
<p>Si ni configurar ni modificar el código es suficiente, es turno escribir un programa desde cero. La ventaja es clara: personalización total. Los costos serán tus habilidades para diseñarlo. Esto solo debería hacerse cuando se detecta una necesidad muy importante para nuestro flujo de trabajo y se esta completamente seguro de que no se ha hecho ya antes.</p>
<p>El software hecho a medida es el sentido supremo de la computadora personal. A veces hay que tenerlo en cuenta, sobre todo hoy en día que casi todo es basura.</p> ]]></description>
</item>
<item>
<title>Software que uso</title>
<link>https://niceshit.tk/software-que-uso.html</link>
<guid>https://niceshit.tk/software-que-uso.html</guid>
<description><![CDATA[ <h1 id="software-que-uso">Software que uso</h1>
<p><img src="attachments/desktop.webp" /></p>
<p>Esta es una publicación que nadie pidió pero era necesario. De otro modo, este distinguido sitio web se habría llenado de publicaciones individuales para cada programa. No quiero que el contenido sobre tecnología, siendo este el mas insignificante, domine sobre el resto.</p>
<p>Pueden notarse algunas características en común en esta lista. Existen características que, si bien, no son determinantes, sí favorecen la decisión de usarse sobre otras alternativas. Esta es una lista resumida de ellas.</p>
<ul>
<li>Software libre. Esto no por ideología, simplemente el software libre, por su naturaleza, tiende a ser mas flexible y razonable.</li>
<li>Funcionar como aplicación de terminal.</li>
<li>De requerir un set de widgets gráficos, que sea GTK y no QT.</li>
<li>No usar tecnologías web innecesariamente.</li>
<li>Multiplataforma.</li>
<li>Estar en los repositorios estables de Debian. <em>Casi siempre</em> es un sello de calidad.</li>
</ul>
<p>Dejando claro lo anterior, dejo la recopilación que sigue.</p>
<h2 id="general">General 🏠</h2>
<h3 id="sistema-operativo">Sistema operativo</h3>
<p>Uso Linux. No hace falta mencionar las bondades de los sistemas Linux aquí. Estas son las distribuciones que tengo</p>
<ul>
<li><p><a href="https://www.devuan.org/">Devuan</a>. Es la distribución que uso en mi maquina principal. Lo único que busco en una distribución es que sea confiable y Devuan es ridículamente estable. Para muchos Debian/Devuan es demasiado lento en cuanto a las actualizaciones, pero en mi caso nunca he tenido problemas al respecto. Incluso me gusta olvidarme de actualizar y cuando lo recuerdo sean un par de paquetes solamente.</p>
<p>Uso Devuan ya que solventa el único problema que tenia con Debian: systemd. No tengo odio hacia systemd. Simplemente no funciona correctamente en mi maquina independientemente de la distribución.</p></li>
<li><p><a href="https://voidlinux.org/">Void</a>. Comencé a usarlo solo por diversión, pero resulto ser una distribución maravillosa. Puesto que quería la experiencia completa, tengo la versión base con <a href="https://musl.libc.org/">musl</a>. La uso en una laptop para cuando salgo de causa. Tiene buenas características como una simpleza increíble, simpleza que la vuelve muy fácil de usar, repositorios amplios pero filtrados de basura. Es la distribución que mas recomiendo.</p></li>
<li><p><a href="http://www.slackware.com/">Slackware</a>. La vieja favorita. La tengo instalada en maquinas viejas, casi destruidas, que pueden pasar años sin ser usadas.</p></li>
</ul>
<h3 id="entorno-de-escritorio">Entorno de escritorio</h3>
<p>Luego de probar muchos tilling window manager me quede con <a href="https://github.com/conformal/spectrwm">Spectrwm</a>. La mayoría de los tilling window manger son, o bien lo mismo, o bien se pueden dejar igual con algunos ajustes. Habiendo dicho esto, Spectrum me gusta porque es el unico cuyas configuraciones por defecto me funcionan a la perfección. Le cambio los colores y poco mas. Por si fuera poco, cambiar los colores es realmente fácil gracias a su razonable sintaxis de configuración.</p>
<p>Entre los escritorio completos, mi favorito es <a href="https://mate-desktop.org/">MATE</a>. No tengo ninguna sola queja con él. Comúnmente lo instalo junto a Spectrum por si acaso.</p>
<p>Independientemente del entorno de escritorio en uso, siempre recomiendo usar <a href="https://jonls.dk/redshift/">Redshift</a>. Redshift modifica la temperatura del color de la pantalla descuerdo a la posición del sol en tu localización. Muy preciso y sano para los ojos.</p>
<h3 id="shell">Shell</h3>
<p><a href="https://www.gnu.org/software/bash/">Bash</a>. Es la primer interfaz de linea de comandos que use y, pese a haber probado las alternativas mas exoticas, no han sido necesarias. Bash hace lo que necesito y es universal. No suelo escribir scripts en Bash, en cambio me gusta que sean simplemente de Sh y dejo a Bash para el uso en la terminal.</p>
<h3 id="terminal">Terminal</h3>
<p>Uso <a href="https://sw.kovidgoyal.net/kitty/">Kitty</a>. Es buena. Tiene todas esas características modernas como el rende rizado por GPU, multiplexado de terminal y pestañas. Lamentablemente todas estas características son demasiado. Si necesito dividir la terminal, es porque no estoy usando un tilling window manager, y en ese caso, lo hago con <a href="https://github.com/tmux/tmux/wiki">tmux</a> pues, funciona en todas las terminales. La unica razón por la que no uso <a href="http://software.schmorp.de/pkg/rxvt-unicode.html">urxvt</a> es porque esta no tiene soporte para emojis (importante 🧐).</p>
<h3 id="gestor-de-archivos">Gestor de archivos</h3>
<p>Casi siempre la consola de comandos es suficiente para manejar mis archivos. Si la cosa se complica uso <a href="https://github.com/jarun/nnn">nnn</a>, mas que nada cuando los nombres de los archivos son extraños o necesito algo visual.</p>
<h3 id="editor-de-texto">Editor de texto</h3>
<p><a href="https://www.vim.org/">Vim</a>. Por mucho el programa mas importante de esta lista. Lo uso para muchas cosas: programar, escribir notas, tomar apuntes de clase, llevar un diario, hacer documentos y presentaciones, redactar esta publicación, et cetera. Cualquier cosa que tenga que ver con escribir, hacerla en Vim es la manera mas cómoda. Cuenta con características interesantes como un método de edición avanzado realmente cómodo, lenguaje de scripting propio y razonablemente fácil, un diccionario integrado, documentación integrada, funciona tanto en la terminal como en GUI, autocompletado, prácticamente esta en disponible en cualquier sistema, tiene un método para insertar caracteres matemáticos, guardado de sesión, edición remota y muchísimo mas. Resalto con entusiasmo lo cómodo que es escribir en Vim. Esta característica no es nada sin el resto, de otro modo seria fácil remplazar Vim con cualquier editor que cuente con un plugin que imite a Vim. Muchos dirían que es fácil dejar otros editores igual que Vim, pero esto requeriría un esfuerzo innecesario. Creo que es un despropósito elegir algo y gastar energía en convertirlo decentemente en una imitación del otra cosa que podría simplemente usar en un primer lugar. Solo vale la pena si las ventajas obtenidas lo valen para mi uso, y hasta ahora no me he encontrado en esa situación.</p>
<p>He usado Emacs. Es magnifico. Pasar de Vim a Emacs es perder un par de ventajas para obtener muchísimas mas. En mi caso, las ventajas que trae cambiar a Emacs no son útiles para mi forma de trabajar, en cambio, las ventajas que pierdo, sí las necesito.</p>
<h2 id="estudios">Estudios 📚</h2>
<h3 id="documentos">Documentos</h3>
<p>Escribo usando la sintaxis de Markdown y luego uso <a href="https://pandoc.org/">pandoc</a> para pasarlo a otro formato. Pandoc es un asombroso software que comenzó como un conversor de archivos pero ahora tiene su atractiva filosofía. Esta es que todo documento debería ser un archivo de texto plano legible y funcional por si mismo. Sumando a su impecable conversion entre formatos, lo hace ideal para mi. Puedo escribir cualquier cosa en Markdown y Pandoc los convertirá a un documento pdf generado con XeLaTeX para la mayor calidad, o bien, generar diapositivas para usarlas en una presentación. Todo a partir del mismo archivo did texto plano, que por la filosofía anterior, también sirve sin necesidad de convertirlo.</p>
<p>Mi visor favorito es <a href="https://pwmt.org/projects/zathura/">zathura</a>. Es ligero, permite una navegación entre documentos por teclado, tiene un modo presentación para interpretar las paginas como diapositivas, y tine un modo de recoloreado, que es indispensable para la lectura.</p>
<p>No uso LaTeX personalmente. Si uso LaTeX es porque estoy haciendo un proyecto en equipo para la Universidad. No hay nada mejor para esto que <a href="https://www.overleaf.com/">Overleaf</a>. Permite el trabajo asíncrono, solo hay que compartir un enlace para acceder al documento, y no hay necesidad de instalar nada ya que funciona completamente en la nube.</p>
<h3 id="análisis-de-datos">Análisis de datos</h3>
<p>No tengo altas exigencias en eficiencia al hacer un análisis de datos. Uso la suit de <a href="https://scipy.org/">SciPy</a> que comprende los modulos para python: NumPy, SimPy, Pandas, Matploitlib y la propia SciPy. Es lo que se usar, me siento cómodo con SciPy y nunca he necesitado nada mas.</p>
<h2 id="internet">Internet 🌐</h2>
<h3 id="navegador">Navegador</h3>
<p>Estoy usando el navegador <a href="https://brave.com/">Brave</a>. Es incomodo estar basado en Chromium pero tiene cosas agradables, como el bloqueo de publicidad por defecto. También uso <a href="https://surf.suckless.org/">surf</a>, un navegador ligero basado en WebKit GTK. Usaría únicamente surf, pero algunas webs no funcionan correctamente.</p>
<h3 id="email">Email</h3>
<p>No he tenido el valor para montarme mi propio servidor de correo electrónico. Por ahora estoy usando <a href="https://protonmail.com/">ProtonMail</a>, no por su premisa de la privacidad, sino por ser el servicio menos malo que encontré.</p>
<h3 id="lector-rss">Lector RSS</h3>
<p>Usar un lector RSS es indispensable para estar al tanto de sitios webs y redes sociales sin comerte hectáreas de publicidad y contenido recomendado por empresas feas. Por su simplicidad, uso <a href="https://newsboat.org/">News boat</a>.</p>
<h3 id="nube-y-sincronización">Nube y sincronización</h3>
<p>La mejor solución ha sido <a href="https://syncthing.net/">Synchting</a>. Todos los NAS tienen problemas importantes. Son costosos, solo puedes usarlos dentro de tu red y bastante peligrosos: si el servidor muere, tus archivos también. Synchting soluciona todos estos problemas. Es un sistema descentralizado que utiliza tus dispositivos como nodos. No hay que adquirir ningún servidor físico del que toda tu información dependa. Puesto que esos nodos pueden ser un celular o una laptop, puedes tener tus archivos a la mano si estas fuera de casa, trabajar con ellos, y, al volver a casa se integraran al resto de dispositivos actualizándose mutuamente.</p>
<p>Tengo también un router que permite insertar una memoria USB en el. Cree un servidor FTP que me permite acceder a los archivos del pendive desde cualquier dispositivo.</p>
<h3 id="gestor-de-contraseñas">Gestor de contraseñas</h3>
<p>Guardo mis contraseñas cifradas con GPG usando el estándar <a href="https://www.passwordstore.org/">pass</a>. Funciona perfecto. Como es un programa de interfaz de consola de comandos, hice un script que automáticamente copia al cortapapeles la contraseña que elija. Es mucho mas cómodo de lo que pensé.</p>
<h2 id="otros">Otros 📦</h2>
<h3 id="multimedia">Multimedia</h3>
<p>Para la visualización, uso <a href="https://mpv.io/">mvp</a> para audio y video, y <a href="https://feh.finalrewind.org/">feh</a> para las imágenes. Funcionan perfecto y no tienen funciones de mas ni dependencias ridículas.</p>
<h3 id="finanzas">Finanzas</h3>
<p>Realizo mi contabilidad personal con <a href="https://gnucash.org/">cash</a>. Fue un poco difícil acostumbrarme a los libros de doble entrada pero las ventajas son grandes.</p>
<p>No uso hojas de calculo. No entiendo como la gente puede usar esa basura. Si necesito hacer ese tipo de cosas uso <a href="https://www.r-project.org/">R</a>. Miles de veces mejor pensado que cualquier programa de hojas de calculo.</p> ]]></description>
</item>
</channel>
</rss>